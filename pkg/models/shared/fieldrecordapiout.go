// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldRecordAPIOutFieldType - The type of the field
type FieldRecordAPIOutFieldType string

const (
	FieldRecordAPIOutFieldTypeDate            FieldRecordAPIOutFieldType = "DATE"
	FieldRecordAPIOutFieldTypeUser            FieldRecordAPIOutFieldType = "USER"
	FieldRecordAPIOutFieldTypeExternalUser    FieldRecordAPIOutFieldType = "EXTERNAL_USER"
	FieldRecordAPIOutFieldTypeText            FieldRecordAPIOutFieldType = "TEXT"
	FieldRecordAPIOutFieldTypeTextArea        FieldRecordAPIOutFieldType = "TEXT_AREA"
	FieldRecordAPIOutFieldTypeNumber          FieldRecordAPIOutFieldType = "NUMBER"
	FieldRecordAPIOutFieldTypeESignature      FieldRecordAPIOutFieldType = "E_SIGNATURE"
	FieldRecordAPIOutFieldTypeCheckbox        FieldRecordAPIOutFieldType = "CHECKBOX"
	FieldRecordAPIOutFieldTypeMultiSelect     FieldRecordAPIOutFieldType = "MULTI_SELECT"
	FieldRecordAPIOutFieldTypeRadio           FieldRecordAPIOutFieldType = "RADIO"
	FieldRecordAPIOutFieldTypeSelect          FieldRecordAPIOutFieldType = "SELECT"
	FieldRecordAPIOutFieldTypeAttachment      FieldRecordAPIOutFieldType = "ATTACHMENT"
	FieldRecordAPIOutFieldTypeCalculation     FieldRecordAPIOutFieldType = "CALCULATION"
	FieldRecordAPIOutFieldTypeDateCalculation FieldRecordAPIOutFieldType = "DATE_CALCULATION"
	FieldRecordAPIOutFieldTypeOther           FieldRecordAPIOutFieldType = "OTHER"
)

func (e FieldRecordAPIOutFieldType) ToPointer() *FieldRecordAPIOutFieldType {
	return &e
}

func (e *FieldRecordAPIOutFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		fallthrough
	case "USER":
		fallthrough
	case "EXTERNAL_USER":
		fallthrough
	case "TEXT":
		fallthrough
	case "TEXT_AREA":
		fallthrough
	case "NUMBER":
		fallthrough
	case "E_SIGNATURE":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "MULTI_SELECT":
		fallthrough
	case "RADIO":
		fallthrough
	case "SELECT":
		fallthrough
	case "ATTACHMENT":
		fallthrough
	case "CALCULATION":
		fallthrough
	case "DATE_CALCULATION":
		fallthrough
	case "OTHER":
		*e = FieldRecordAPIOutFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldRecordAPIOutFieldType: %v", v)
	}
}

// FieldRecordAPIOutValueType - The type of the field value
type FieldRecordAPIOutValueType string

const (
	FieldRecordAPIOutValueTypeNumber      FieldRecordAPIOutValueType = "NUMBER"
	FieldRecordAPIOutValueTypeCalculation FieldRecordAPIOutValueType = "CALCULATION"
	FieldRecordAPIOutValueTypeAttachment  FieldRecordAPIOutValueType = "ATTACHMENT"
	FieldRecordAPIOutValueTypeDate        FieldRecordAPIOutValueType = "DATE"
	FieldRecordAPIOutValueTypeOption      FieldRecordAPIOutValueType = "OPTION"
	FieldRecordAPIOutValueTypeUser        FieldRecordAPIOutValueType = "USER"
	FieldRecordAPIOutValueTypeText        FieldRecordAPIOutValueType = "TEXT"
	FieldRecordAPIOutValueTypeOther       FieldRecordAPIOutValueType = "OTHER"
)

func (e FieldRecordAPIOutValueType) ToPointer() *FieldRecordAPIOutValueType {
	return &e
}

func (e *FieldRecordAPIOutValueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		fallthrough
	case "CALCULATION":
		fallthrough
	case "ATTACHMENT":
		fallthrough
	case "DATE":
		fallthrough
	case "OPTION":
		fallthrough
	case "USER":
		fallthrough
	case "TEXT":
		fallthrough
	case "OTHER":
		*e = FieldRecordAPIOutValueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldRecordAPIOutValueType: %v", v)
	}
}

// FieldRecordAPIOut - The fields and values of the record
type FieldRecordAPIOut struct {
	// Whether the field is global
	Global *bool `json:"global,omitempty"`
	// The unique ID of this Risk Cloud resource
	ID *string `json:"id,omitempty"`
	// The label of the field as shown on the record
	Label *string `json:"label,omitempty"`
	// The name of the field
	Name *string `json:"name,omitempty"`
	// Identifies the type of object this data represents
	Object *string `json:"object,omitempty"`
	// The type of the field
	Type *FieldRecordAPIOutFieldType `json:"type,omitempty"`
	// The type of the field value
	ValueType *FieldRecordAPIOutValueType `json:"valueType,omitempty"`
	// The values of the record field
	Values []ValuePropertyAPIOut `json:"values,omitempty"`
}

func (o *FieldRecordAPIOut) GetGlobal() *bool {
	if o == nil {
		return nil
	}
	return o.Global
}

func (o *FieldRecordAPIOut) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FieldRecordAPIOut) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldRecordAPIOut) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *FieldRecordAPIOut) GetObject() *string {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *FieldRecordAPIOut) GetType() *FieldRecordAPIOutFieldType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FieldRecordAPIOut) GetValueType() *FieldRecordAPIOutValueType {
	if o == nil {
		return nil
	}
	return o.ValueType
}

func (o *FieldRecordAPIOut) GetValues() []ValuePropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Values
}
