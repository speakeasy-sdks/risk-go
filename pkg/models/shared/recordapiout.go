// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecordAPIOutStatus - The status of the record
type RecordAPIOutStatus string

const (
	RecordAPIOutStatusInactive    RecordAPIOutStatus = "INACTIVE"
	RecordAPIOutStatusNotAssigned RecordAPIOutStatus = "NOT_ASSIGNED"
	RecordAPIOutStatusAssigned    RecordAPIOutStatus = "ASSIGNED"
	RecordAPIOutStatusInProgress  RecordAPIOutStatus = "IN_PROGRESS"
	RecordAPIOutStatusComplete    RecordAPIOutStatus = "COMPLETE"
)

func (e RecordAPIOutStatus) ToPointer() *RecordAPIOutStatus {
	return &e
}

func (e *RecordAPIOutStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INACTIVE":
		fallthrough
	case "NOT_ASSIGNED":
		fallthrough
	case "ASSIGNED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "COMPLETE":
		*e = RecordAPIOutStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordAPIOutStatus: %v", v)
	}
}

// RecordAPIOut - A array of returned items
type RecordAPIOut struct {
	// The parent application of the record
	Application *ApplicationPropertyAPIOut `json:"application,omitempty"`
	// The creator of the record
	Assignee *UserPropertyAPIOut `json:"assignee,omitempty"`
	// The creator of the record
	Creator *UserPropertyAPIOut `json:"creator,omitempty"`
	// The origin step of the record
	CurrentStep *StepPropertyAPIOut `json:"currentStep,omitempty"`
	// Date information associated with the record
	Dates *RecordDatesAPIOut `json:"dates,omitempty"`
	// The fields and values of the record
	Fields []FieldRecordAPIOut `json:"fields,omitempty"`
	// The unique ID of this Risk Cloud resource
	ID *string `json:"id,omitempty"`
	// The text value of the primary field of the record, otherwise the workflow prefix and sequence number of the record
	Name *string `json:"name,omitempty"`
	// Identifies the type of object this data represents
	Object *string `json:"object,omitempty"`
	// The origin step of the record
	OriginStep *StepPropertyAPIOut `json:"originStep,omitempty"`
	// The workflow prefix and sequence number of the record
	RecordName *string `json:"recordName,omitempty"`
	// The sequence number of the record
	SequenceNumber *int64 `json:"sequenceNumber,omitempty"`
	// The status of the record
	Status *RecordAPIOutStatus `json:"status,omitempty"`
	// The parent workflow of the step
	Workflow *WorkflowPropertyAPIOut `json:"workflow,omitempty"`
}

func (o *RecordAPIOut) GetApplication() *ApplicationPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Application
}

func (o *RecordAPIOut) GetAssignee() *UserPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Assignee
}

func (o *RecordAPIOut) GetCreator() *UserPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RecordAPIOut) GetCurrentStep() *StepPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.CurrentStep
}

func (o *RecordAPIOut) GetDates() *RecordDatesAPIOut {
	if o == nil {
		return nil
	}
	return o.Dates
}

func (o *RecordAPIOut) GetFields() []FieldRecordAPIOut {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *RecordAPIOut) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RecordAPIOut) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RecordAPIOut) GetObject() *string {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *RecordAPIOut) GetOriginStep() *StepPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.OriginStep
}

func (o *RecordAPIOut) GetRecordName() *string {
	if o == nil {
		return nil
	}
	return o.RecordName
}

func (o *RecordAPIOut) GetSequenceNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.SequenceNumber
}

func (o *RecordAPIOut) GetStatus() *RecordAPIOutStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *RecordAPIOut) GetWorkflow() *WorkflowPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Workflow
}
