// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApplicationAPIUpdateInIcon - The icon type of the application
type ApplicationAPIUpdateInIcon string

const (
	ApplicationAPIUpdateInIconBookmark            ApplicationAPIUpdateInIcon = "BOOKMARK"
	ApplicationAPIUpdateInIconBolt                ApplicationAPIUpdateInIcon = "BOLT"
	ApplicationAPIUpdateInIconBullhorn            ApplicationAPIUpdateInIcon = "BULLHORN"
	ApplicationAPIUpdateInIconCertificate         ApplicationAPIUpdateInIcon = "CERTIFICATE"
	ApplicationAPIUpdateInIconCheckSquareO        ApplicationAPIUpdateInIcon = "CHECK_SQUARE_O"
	ApplicationAPIUpdateInIconCloud               ApplicationAPIUpdateInIcon = "CLOUD"
	ApplicationAPIUpdateInIconComments            ApplicationAPIUpdateInIcon = "COMMENTS"
	ApplicationAPIUpdateInIconCubes               ApplicationAPIUpdateInIcon = "CUBES"
	ApplicationAPIUpdateInIconDollar              ApplicationAPIUpdateInIcon = "DOLLAR"
	ApplicationAPIUpdateInIconExclamationTriangle ApplicationAPIUpdateInIcon = "EXCLAMATION_TRIANGLE"
	ApplicationAPIUpdateInIconTextO               ApplicationAPIUpdateInIcon = "TEXT_O"
	ApplicationAPIUpdateInIconFolder              ApplicationAPIUpdateInIcon = "FOLDER"
	ApplicationAPIUpdateInIconGift                ApplicationAPIUpdateInIcon = "GIFT"
	ApplicationAPIUpdateInIconGlobe               ApplicationAPIUpdateInIcon = "GLOBE"
	ApplicationAPIUpdateInIconHeartbeat           ApplicationAPIUpdateInIcon = "HEARTBEAT"
	ApplicationAPIUpdateInIconLeaf                ApplicationAPIUpdateInIcon = "LEAF"
	ApplicationAPIUpdateInIconLegal               ApplicationAPIUpdateInIcon = "LEGAL"
	ApplicationAPIUpdateInIconLifeRing            ApplicationAPIUpdateInIcon = "LIFE_RING"
	ApplicationAPIUpdateInIconMedkit              ApplicationAPIUpdateInIcon = "MEDKIT"
	ApplicationAPIUpdateInIconMoney               ApplicationAPIUpdateInIcon = "MONEY"
	ApplicationAPIUpdateInIconPercent             ApplicationAPIUpdateInIcon = "PERCENT"
	ApplicationAPIUpdateInIconRocket              ApplicationAPIUpdateInIcon = "ROCKET"
	ApplicationAPIUpdateInIconSignal              ApplicationAPIUpdateInIcon = "SIGNAL"
	ApplicationAPIUpdateInIconUniversity          ApplicationAPIUpdateInIcon = "UNIVERSITY"
	ApplicationAPIUpdateInIconUserCircle          ApplicationAPIUpdateInIcon = "USER_CIRCLE"
)

func (e ApplicationAPIUpdateInIcon) ToPointer() *ApplicationAPIUpdateInIcon {
	return &e
}

func (e *ApplicationAPIUpdateInIcon) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOKMARK":
		fallthrough
	case "BOLT":
		fallthrough
	case "BULLHORN":
		fallthrough
	case "CERTIFICATE":
		fallthrough
	case "CHECK_SQUARE_O":
		fallthrough
	case "CLOUD":
		fallthrough
	case "COMMENTS":
		fallthrough
	case "CUBES":
		fallthrough
	case "DOLLAR":
		fallthrough
	case "EXCLAMATION_TRIANGLE":
		fallthrough
	case "TEXT_O":
		fallthrough
	case "FOLDER":
		fallthrough
	case "GIFT":
		fallthrough
	case "GLOBE":
		fallthrough
	case "HEARTBEAT":
		fallthrough
	case "LEAF":
		fallthrough
	case "LEGAL":
		fallthrough
	case "LIFE_RING":
		fallthrough
	case "MEDKIT":
		fallthrough
	case "MONEY":
		fallthrough
	case "PERCENT":
		fallthrough
	case "ROCKET":
		fallthrough
	case "SIGNAL":
		fallthrough
	case "UNIVERSITY":
		fallthrough
	case "USER_CIRCLE":
		*e = ApplicationAPIUpdateInIcon(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationAPIUpdateInIcon: %v", v)
	}
}

// ApplicationAPIUpdateInType - The type of Risk Cloud application
type ApplicationAPIUpdateInType string

const (
	ApplicationAPIUpdateInTypeAccessManagement             ApplicationAPIUpdateInType = "ACCESS_MANAGEMENT"
	ApplicationAPIUpdateInTypeAmlKyc                       ApplicationAPIUpdateInType = "AML_KYC"
	ApplicationAPIUpdateInTypeAssetManagement              ApplicationAPIUpdateInType = "ASSET_MANAGEMENT"
	ApplicationAPIUpdateInTypeAuditManagement              ApplicationAPIUpdateInType = "AUDIT_MANAGEMENT"
	ApplicationAPIUpdateInTypeBusinessContinuityPlanning   ApplicationAPIUpdateInType = "BUSINESS_CONTINUITY_PLANNING"
	ApplicationAPIUpdateInTypeChangeManagement             ApplicationAPIUpdateInType = "CHANGE_MANAGEMENT"
	ApplicationAPIUpdateInTypeComplaintManagement          ApplicationAPIUpdateInType = "COMPLAINT_MANAGEMENT"
	ApplicationAPIUpdateInTypeComplianceManagement         ApplicationAPIUpdateInType = "COMPLIANCE_MANAGEMENT"
	ApplicationAPIUpdateInTypeContractManagement           ApplicationAPIUpdateInType = "CONTRACT_MANAGEMENT"
	ApplicationAPIUpdateInTypeControlsCompliance           ApplicationAPIUpdateInType = "CONTROLS_COMPLIANCE"
	ApplicationAPIUpdateInTypeControlsManagement           ApplicationAPIUpdateInType = "CONTROLS_MANAGEMENT"
	ApplicationAPIUpdateInTypeCrisisManagement             ApplicationAPIUpdateInType = "CRISIS_MANAGEMENT"
	ApplicationAPIUpdateInTypeCustom                       ApplicationAPIUpdateInType = "CUSTOM"
	ApplicationAPIUpdateInTypeCustomGrcUseCase             ApplicationAPIUpdateInType = "CUSTOM_GRC_USE_CASE"
	ApplicationAPIUpdateInTypeCyberRiskManagement          ApplicationAPIUpdateInType = "CYBER_RISK_MANAGEMENT"
	ApplicationAPIUpdateInTypeDataPrivacyManagement        ApplicationAPIUpdateInType = "DATA_PRIVACY_MANAGEMENT"
	ApplicationAPIUpdateInTypeEmployeeCompliance           ApplicationAPIUpdateInType = "EMPLOYEE_COMPLIANCE"
	ApplicationAPIUpdateInTypeEnterpriseRiskManagement     ApplicationAPIUpdateInType = "ENTERPRISE_RISK_MANAGEMENT"
	ApplicationAPIUpdateInTypeEsg                          ApplicationAPIUpdateInType = "ESG"
	ApplicationAPIUpdateInTypeIncidentManagement           ApplicationAPIUpdateInType = "INCIDENT_MANAGEMENT"
	ApplicationAPIUpdateInTypeInternalAuditManagement      ApplicationAPIUpdateInType = "INTERNAL_AUDIT_MANAGEMENT"
	ApplicationAPIUpdateInTypeItRiskManagement             ApplicationAPIUpdateInType = "IT_RISK_MANAGEMENT"
	ApplicationAPIUpdateInTypeNone                         ApplicationAPIUpdateInType = "NONE"
	ApplicationAPIUpdateInTypeOperationalResiliency        ApplicationAPIUpdateInType = "OPERATIONAL_RESILIENCY"
	ApplicationAPIUpdateInTypeOther                        ApplicationAPIUpdateInType = "OTHER"
	ApplicationAPIUpdateInTypePolicyAndProcedureManagement ApplicationAPIUpdateInType = "POLICY_AND_PROCEDURE_MANAGEMENT"
	ApplicationAPIUpdateInTypePolicyManagement             ApplicationAPIUpdateInType = "POLICY_MANAGEMENT"
	ApplicationAPIUpdateInTypePrivacyManagement            ApplicationAPIUpdateInType = "PRIVACY_MANAGEMENT"
	ApplicationAPIUpdateInTypeQuantify                     ApplicationAPIUpdateInType = "QUANTIFY"
	ApplicationAPIUpdateInTypeRegulatoryCompliance         ApplicationAPIUpdateInType = "REGULATORY_COMPLIANCE"
	ApplicationAPIUpdateInTypeRepository                   ApplicationAPIUpdateInType = "REPOSITORY"
	ApplicationAPIUpdateInTypeRiskQuantification           ApplicationAPIUpdateInType = "RISK_QUANTIFICATION"
	ApplicationAPIUpdateInTypeSoxTesting                   ApplicationAPIUpdateInType = "SOX_TESTING"
	ApplicationAPIUpdateInTypeStandardsRegulations         ApplicationAPIUpdateInType = "STANDARDS_REGULATIONS"
	ApplicationAPIUpdateInTypeSurvey                       ApplicationAPIUpdateInType = "SURVEY"
	ApplicationAPIUpdateInTypeThirdPartyRiskManagement     ApplicationAPIUpdateInType = "THIRD_PARTY_RISK_MANAGEMENT"
)

func (e ApplicationAPIUpdateInType) ToPointer() *ApplicationAPIUpdateInType {
	return &e
}

func (e *ApplicationAPIUpdateInType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_MANAGEMENT":
		fallthrough
	case "AML_KYC":
		fallthrough
	case "ASSET_MANAGEMENT":
		fallthrough
	case "AUDIT_MANAGEMENT":
		fallthrough
	case "BUSINESS_CONTINUITY_PLANNING":
		fallthrough
	case "CHANGE_MANAGEMENT":
		fallthrough
	case "COMPLAINT_MANAGEMENT":
		fallthrough
	case "COMPLIANCE_MANAGEMENT":
		fallthrough
	case "CONTRACT_MANAGEMENT":
		fallthrough
	case "CONTROLS_COMPLIANCE":
		fallthrough
	case "CONTROLS_MANAGEMENT":
		fallthrough
	case "CRISIS_MANAGEMENT":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "CUSTOM_GRC_USE_CASE":
		fallthrough
	case "CYBER_RISK_MANAGEMENT":
		fallthrough
	case "DATA_PRIVACY_MANAGEMENT":
		fallthrough
	case "EMPLOYEE_COMPLIANCE":
		fallthrough
	case "ENTERPRISE_RISK_MANAGEMENT":
		fallthrough
	case "ESG":
		fallthrough
	case "INCIDENT_MANAGEMENT":
		fallthrough
	case "INTERNAL_AUDIT_MANAGEMENT":
		fallthrough
	case "IT_RISK_MANAGEMENT":
		fallthrough
	case "NONE":
		fallthrough
	case "OPERATIONAL_RESILIENCY":
		fallthrough
	case "OTHER":
		fallthrough
	case "POLICY_AND_PROCEDURE_MANAGEMENT":
		fallthrough
	case "POLICY_MANAGEMENT":
		fallthrough
	case "PRIVACY_MANAGEMENT":
		fallthrough
	case "QUANTIFY":
		fallthrough
	case "REGULATORY_COMPLIANCE":
		fallthrough
	case "REPOSITORY":
		fallthrough
	case "RISK_QUANTIFICATION":
		fallthrough
	case "SOX_TESTING":
		fallthrough
	case "STANDARDS_REGULATIONS":
		fallthrough
	case "SURVEY":
		fallthrough
	case "THIRD_PARTY_RISK_MANAGEMENT":
		*e = ApplicationAPIUpdateInType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationAPIUpdateInType: %v", v)
	}
}

type ApplicationAPIUpdateIn struct {
	// The hex representation of the icon color of the application
	Color *string `json:"color,omitempty"`
	// The icon type of the application
	Icon *ApplicationAPIUpdateInIcon `json:"icon,omitempty"`
	// Whether the application is live
	Live *bool `json:"live,omitempty"`
	// The name of the application
	Name *string `json:"name,omitempty"`
	// Whether users with the Build entitlement must be explicitly granted permission to edit this application
	RestrictBuildAccess *bool `json:"restrictBuildAccess,omitempty"`
	// The type of Risk Cloud application
	Type *ApplicationAPIUpdateInType `json:"type,omitempty"`
}

func (o *ApplicationAPIUpdateIn) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ApplicationAPIUpdateIn) GetIcon() *ApplicationAPIUpdateInIcon {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ApplicationAPIUpdateIn) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *ApplicationAPIUpdateIn) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ApplicationAPIUpdateIn) GetRestrictBuildAccess() *bool {
	if o == nil {
		return nil
	}
	return o.RestrictBuildAccess
}

func (o *ApplicationAPIUpdateIn) GetType() *ApplicationAPIUpdateInType {
	if o == nil {
		return nil
	}
	return o.Type
}
