// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApplicationAPIOutIcon - The icon type of the application
type ApplicationAPIOutIcon string

const (
	ApplicationAPIOutIconBookmark            ApplicationAPIOutIcon = "BOOKMARK"
	ApplicationAPIOutIconBolt                ApplicationAPIOutIcon = "BOLT"
	ApplicationAPIOutIconBullhorn            ApplicationAPIOutIcon = "BULLHORN"
	ApplicationAPIOutIconCertificate         ApplicationAPIOutIcon = "CERTIFICATE"
	ApplicationAPIOutIconCheckSquareO        ApplicationAPIOutIcon = "CHECK_SQUARE_O"
	ApplicationAPIOutIconCloud               ApplicationAPIOutIcon = "CLOUD"
	ApplicationAPIOutIconComments            ApplicationAPIOutIcon = "COMMENTS"
	ApplicationAPIOutIconCubes               ApplicationAPIOutIcon = "CUBES"
	ApplicationAPIOutIconDollar              ApplicationAPIOutIcon = "DOLLAR"
	ApplicationAPIOutIconExclamationTriangle ApplicationAPIOutIcon = "EXCLAMATION_TRIANGLE"
	ApplicationAPIOutIconTextO               ApplicationAPIOutIcon = "TEXT_O"
	ApplicationAPIOutIconFolder              ApplicationAPIOutIcon = "FOLDER"
	ApplicationAPIOutIconGift                ApplicationAPIOutIcon = "GIFT"
	ApplicationAPIOutIconGlobe               ApplicationAPIOutIcon = "GLOBE"
	ApplicationAPIOutIconHeartbeat           ApplicationAPIOutIcon = "HEARTBEAT"
	ApplicationAPIOutIconLeaf                ApplicationAPIOutIcon = "LEAF"
	ApplicationAPIOutIconLegal               ApplicationAPIOutIcon = "LEGAL"
	ApplicationAPIOutIconLifeRing            ApplicationAPIOutIcon = "LIFE_RING"
	ApplicationAPIOutIconMedkit              ApplicationAPIOutIcon = "MEDKIT"
	ApplicationAPIOutIconMoney               ApplicationAPIOutIcon = "MONEY"
	ApplicationAPIOutIconPercent             ApplicationAPIOutIcon = "PERCENT"
	ApplicationAPIOutIconRocket              ApplicationAPIOutIcon = "ROCKET"
	ApplicationAPIOutIconSignal              ApplicationAPIOutIcon = "SIGNAL"
	ApplicationAPIOutIconUniversity          ApplicationAPIOutIcon = "UNIVERSITY"
	ApplicationAPIOutIconUserCircle          ApplicationAPIOutIcon = "USER_CIRCLE"
)

func (e ApplicationAPIOutIcon) ToPointer() *ApplicationAPIOutIcon {
	return &e
}

func (e *ApplicationAPIOutIcon) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOKMARK":
		fallthrough
	case "BOLT":
		fallthrough
	case "BULLHORN":
		fallthrough
	case "CERTIFICATE":
		fallthrough
	case "CHECK_SQUARE_O":
		fallthrough
	case "CLOUD":
		fallthrough
	case "COMMENTS":
		fallthrough
	case "CUBES":
		fallthrough
	case "DOLLAR":
		fallthrough
	case "EXCLAMATION_TRIANGLE":
		fallthrough
	case "TEXT_O":
		fallthrough
	case "FOLDER":
		fallthrough
	case "GIFT":
		fallthrough
	case "GLOBE":
		fallthrough
	case "HEARTBEAT":
		fallthrough
	case "LEAF":
		fallthrough
	case "LEGAL":
		fallthrough
	case "LIFE_RING":
		fallthrough
	case "MEDKIT":
		fallthrough
	case "MONEY":
		fallthrough
	case "PERCENT":
		fallthrough
	case "ROCKET":
		fallthrough
	case "SIGNAL":
		fallthrough
	case "UNIVERSITY":
		fallthrough
	case "USER_CIRCLE":
		*e = ApplicationAPIOutIcon(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationAPIOutIcon: %v", v)
	}
}

// ApplicationAPIOutType - The type of Risk Cloud application
type ApplicationAPIOutType string

const (
	ApplicationAPIOutTypeAccessManagement             ApplicationAPIOutType = "ACCESS_MANAGEMENT"
	ApplicationAPIOutTypeAmlKyc                       ApplicationAPIOutType = "AML_KYC"
	ApplicationAPIOutTypeAssetManagement              ApplicationAPIOutType = "ASSET_MANAGEMENT"
	ApplicationAPIOutTypeAuditManagement              ApplicationAPIOutType = "AUDIT_MANAGEMENT"
	ApplicationAPIOutTypeBusinessContinuityPlanning   ApplicationAPIOutType = "BUSINESS_CONTINUITY_PLANNING"
	ApplicationAPIOutTypeChangeManagement             ApplicationAPIOutType = "CHANGE_MANAGEMENT"
	ApplicationAPIOutTypeComplaintManagement          ApplicationAPIOutType = "COMPLAINT_MANAGEMENT"
	ApplicationAPIOutTypeComplianceManagement         ApplicationAPIOutType = "COMPLIANCE_MANAGEMENT"
	ApplicationAPIOutTypeContractManagement           ApplicationAPIOutType = "CONTRACT_MANAGEMENT"
	ApplicationAPIOutTypeControlsCompliance           ApplicationAPIOutType = "CONTROLS_COMPLIANCE"
	ApplicationAPIOutTypeControlsManagement           ApplicationAPIOutType = "CONTROLS_MANAGEMENT"
	ApplicationAPIOutTypeCrisisManagement             ApplicationAPIOutType = "CRISIS_MANAGEMENT"
	ApplicationAPIOutTypeCustom                       ApplicationAPIOutType = "CUSTOM"
	ApplicationAPIOutTypeCustomGrcUseCase             ApplicationAPIOutType = "CUSTOM_GRC_USE_CASE"
	ApplicationAPIOutTypeCyberRiskManagement          ApplicationAPIOutType = "CYBER_RISK_MANAGEMENT"
	ApplicationAPIOutTypeDataPrivacyManagement        ApplicationAPIOutType = "DATA_PRIVACY_MANAGEMENT"
	ApplicationAPIOutTypeEmployeeCompliance           ApplicationAPIOutType = "EMPLOYEE_COMPLIANCE"
	ApplicationAPIOutTypeEnterpriseRiskManagement     ApplicationAPIOutType = "ENTERPRISE_RISK_MANAGEMENT"
	ApplicationAPIOutTypeEsg                          ApplicationAPIOutType = "ESG"
	ApplicationAPIOutTypeIncidentManagement           ApplicationAPIOutType = "INCIDENT_MANAGEMENT"
	ApplicationAPIOutTypeInternalAuditManagement      ApplicationAPIOutType = "INTERNAL_AUDIT_MANAGEMENT"
	ApplicationAPIOutTypeItRiskManagement             ApplicationAPIOutType = "IT_RISK_MANAGEMENT"
	ApplicationAPIOutTypeNone                         ApplicationAPIOutType = "NONE"
	ApplicationAPIOutTypeOperationalResiliency        ApplicationAPIOutType = "OPERATIONAL_RESILIENCY"
	ApplicationAPIOutTypeOther                        ApplicationAPIOutType = "OTHER"
	ApplicationAPIOutTypePolicyAndProcedureManagement ApplicationAPIOutType = "POLICY_AND_PROCEDURE_MANAGEMENT"
	ApplicationAPIOutTypePolicyManagement             ApplicationAPIOutType = "POLICY_MANAGEMENT"
	ApplicationAPIOutTypePrivacyManagement            ApplicationAPIOutType = "PRIVACY_MANAGEMENT"
	ApplicationAPIOutTypeQuantify                     ApplicationAPIOutType = "QUANTIFY"
	ApplicationAPIOutTypeRegulatoryCompliance         ApplicationAPIOutType = "REGULATORY_COMPLIANCE"
	ApplicationAPIOutTypeRepository                   ApplicationAPIOutType = "REPOSITORY"
	ApplicationAPIOutTypeRiskQuantification           ApplicationAPIOutType = "RISK_QUANTIFICATION"
	ApplicationAPIOutTypeSoxTesting                   ApplicationAPIOutType = "SOX_TESTING"
	ApplicationAPIOutTypeStandardsRegulations         ApplicationAPIOutType = "STANDARDS_REGULATIONS"
	ApplicationAPIOutTypeSurvey                       ApplicationAPIOutType = "SURVEY"
	ApplicationAPIOutTypeThirdPartyRiskManagement     ApplicationAPIOutType = "THIRD_PARTY_RISK_MANAGEMENT"
)

func (e ApplicationAPIOutType) ToPointer() *ApplicationAPIOutType {
	return &e
}

func (e *ApplicationAPIOutType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_MANAGEMENT":
		fallthrough
	case "AML_KYC":
		fallthrough
	case "ASSET_MANAGEMENT":
		fallthrough
	case "AUDIT_MANAGEMENT":
		fallthrough
	case "BUSINESS_CONTINUITY_PLANNING":
		fallthrough
	case "CHANGE_MANAGEMENT":
		fallthrough
	case "COMPLAINT_MANAGEMENT":
		fallthrough
	case "COMPLIANCE_MANAGEMENT":
		fallthrough
	case "CONTRACT_MANAGEMENT":
		fallthrough
	case "CONTROLS_COMPLIANCE":
		fallthrough
	case "CONTROLS_MANAGEMENT":
		fallthrough
	case "CRISIS_MANAGEMENT":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "CUSTOM_GRC_USE_CASE":
		fallthrough
	case "CYBER_RISK_MANAGEMENT":
		fallthrough
	case "DATA_PRIVACY_MANAGEMENT":
		fallthrough
	case "EMPLOYEE_COMPLIANCE":
		fallthrough
	case "ENTERPRISE_RISK_MANAGEMENT":
		fallthrough
	case "ESG":
		fallthrough
	case "INCIDENT_MANAGEMENT":
		fallthrough
	case "INTERNAL_AUDIT_MANAGEMENT":
		fallthrough
	case "IT_RISK_MANAGEMENT":
		fallthrough
	case "NONE":
		fallthrough
	case "OPERATIONAL_RESILIENCY":
		fallthrough
	case "OTHER":
		fallthrough
	case "POLICY_AND_PROCEDURE_MANAGEMENT":
		fallthrough
	case "POLICY_MANAGEMENT":
		fallthrough
	case "PRIVACY_MANAGEMENT":
		fallthrough
	case "QUANTIFY":
		fallthrough
	case "REGULATORY_COMPLIANCE":
		fallthrough
	case "REPOSITORY":
		fallthrough
	case "RISK_QUANTIFICATION":
		fallthrough
	case "SOX_TESTING":
		fallthrough
	case "STANDARDS_REGULATIONS":
		fallthrough
	case "SURVEY":
		fallthrough
	case "THIRD_PARTY_RISK_MANAGEMENT":
		*e = ApplicationAPIOutType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationAPIOutType: %v", v)
	}
}

type ApplicationAPIOut struct {
	// The hex representation of the icon color of the application
	Color *string `json:"color,omitempty"`
	// The icon type of the application
	Icon *ApplicationAPIOutIcon `json:"icon,omitempty"`
	// The unique ID of this Risk Cloud resource
	ID *string `json:"id,omitempty"`
	// Whether the application is live
	Live *bool `json:"live,omitempty"`
	// The name of the application
	Name *string `json:"name,omitempty"`
	// Identifies the type of object this data represents
	Object *string `json:"object,omitempty"`
	// Whether users with the Build entitlement must be explicitly granted permission to edit this application
	RestrictBuildAccess *bool `json:"restrictBuildAccess,omitempty"`
	// The type of Risk Cloud application
	Type *ApplicationAPIOutType `json:"type,omitempty"`
}

func (o *ApplicationAPIOut) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ApplicationAPIOut) GetIcon() *ApplicationAPIOutIcon {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ApplicationAPIOut) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ApplicationAPIOut) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *ApplicationAPIOut) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ApplicationAPIOut) GetObject() *string {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *ApplicationAPIOut) GetRestrictBuildAccess() *bool {
	if o == nil {
		return nil
	}
	return o.RestrictBuildAccess
}

func (o *ApplicationAPIOut) GetType() *ApplicationAPIOutType {
	if o == nil {
		return nil
	}
	return o.Type
}
