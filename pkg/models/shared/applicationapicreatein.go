// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Icon - The icon type of the application (defaults to CUBES)
type Icon string

const (
	IconBookmark            Icon = "BOOKMARK"
	IconBolt                Icon = "BOLT"
	IconBullhorn            Icon = "BULLHORN"
	IconCertificate         Icon = "CERTIFICATE"
	IconCheckSquareO        Icon = "CHECK_SQUARE_O"
	IconCloud               Icon = "CLOUD"
	IconComments            Icon = "COMMENTS"
	IconCubes               Icon = "CUBES"
	IconDollar              Icon = "DOLLAR"
	IconExclamationTriangle Icon = "EXCLAMATION_TRIANGLE"
	IconTextO               Icon = "TEXT_O"
	IconFolder              Icon = "FOLDER"
	IconGift                Icon = "GIFT"
	IconGlobe               Icon = "GLOBE"
	IconHeartbeat           Icon = "HEARTBEAT"
	IconLeaf                Icon = "LEAF"
	IconLegal               Icon = "LEGAL"
	IconLifeRing            Icon = "LIFE_RING"
	IconMedkit              Icon = "MEDKIT"
	IconMoney               Icon = "MONEY"
	IconPercent             Icon = "PERCENT"
	IconRocket              Icon = "ROCKET"
	IconSignal              Icon = "SIGNAL"
	IconUniversity          Icon = "UNIVERSITY"
	IconUserCircle          Icon = "USER_CIRCLE"
)

func (e Icon) ToPointer() *Icon {
	return &e
}

func (e *Icon) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOKMARK":
		fallthrough
	case "BOLT":
		fallthrough
	case "BULLHORN":
		fallthrough
	case "CERTIFICATE":
		fallthrough
	case "CHECK_SQUARE_O":
		fallthrough
	case "CLOUD":
		fallthrough
	case "COMMENTS":
		fallthrough
	case "CUBES":
		fallthrough
	case "DOLLAR":
		fallthrough
	case "EXCLAMATION_TRIANGLE":
		fallthrough
	case "TEXT_O":
		fallthrough
	case "FOLDER":
		fallthrough
	case "GIFT":
		fallthrough
	case "GLOBE":
		fallthrough
	case "HEARTBEAT":
		fallthrough
	case "LEAF":
		fallthrough
	case "LEGAL":
		fallthrough
	case "LIFE_RING":
		fallthrough
	case "MEDKIT":
		fallthrough
	case "MONEY":
		fallthrough
	case "PERCENT":
		fallthrough
	case "ROCKET":
		fallthrough
	case "SIGNAL":
		fallthrough
	case "UNIVERSITY":
		fallthrough
	case "USER_CIRCLE":
		*e = Icon(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Icon: %v", v)
	}
}

// Type - The type of Risk Cloud application (defaults to NONE)
type Type string

const (
	TypeAccessManagement             Type = "ACCESS_MANAGEMENT"
	TypeAmlKyc                       Type = "AML_KYC"
	TypeAssetManagement              Type = "ASSET_MANAGEMENT"
	TypeAuditManagement              Type = "AUDIT_MANAGEMENT"
	TypeBusinessContinuityPlanning   Type = "BUSINESS_CONTINUITY_PLANNING"
	TypeChangeManagement             Type = "CHANGE_MANAGEMENT"
	TypeComplaintManagement          Type = "COMPLAINT_MANAGEMENT"
	TypeComplianceManagement         Type = "COMPLIANCE_MANAGEMENT"
	TypeContractManagement           Type = "CONTRACT_MANAGEMENT"
	TypeControlsCompliance           Type = "CONTROLS_COMPLIANCE"
	TypeControlsManagement           Type = "CONTROLS_MANAGEMENT"
	TypeCrisisManagement             Type = "CRISIS_MANAGEMENT"
	TypeCustom                       Type = "CUSTOM"
	TypeCustomGrcUseCase             Type = "CUSTOM_GRC_USE_CASE"
	TypeCyberRiskManagement          Type = "CYBER_RISK_MANAGEMENT"
	TypeDataPrivacyManagement        Type = "DATA_PRIVACY_MANAGEMENT"
	TypeEmployeeCompliance           Type = "EMPLOYEE_COMPLIANCE"
	TypeEnterpriseRiskManagement     Type = "ENTERPRISE_RISK_MANAGEMENT"
	TypeEsg                          Type = "ESG"
	TypeIncidentManagement           Type = "INCIDENT_MANAGEMENT"
	TypeInternalAuditManagement      Type = "INTERNAL_AUDIT_MANAGEMENT"
	TypeItRiskManagement             Type = "IT_RISK_MANAGEMENT"
	TypeNone                         Type = "NONE"
	TypeOperationalResiliency        Type = "OPERATIONAL_RESILIENCY"
	TypeOther                        Type = "OTHER"
	TypePolicyAndProcedureManagement Type = "POLICY_AND_PROCEDURE_MANAGEMENT"
	TypePolicyManagement             Type = "POLICY_MANAGEMENT"
	TypePrivacyManagement            Type = "PRIVACY_MANAGEMENT"
	TypeQuantify                     Type = "QUANTIFY"
	TypeRegulatoryCompliance         Type = "REGULATORY_COMPLIANCE"
	TypeRepository                   Type = "REPOSITORY"
	TypeRiskQuantification           Type = "RISK_QUANTIFICATION"
	TypeSoxTesting                   Type = "SOX_TESTING"
	TypeStandardsRegulations         Type = "STANDARDS_REGULATIONS"
	TypeSurvey                       Type = "SURVEY"
	TypeThirdPartyRiskManagement     Type = "THIRD_PARTY_RISK_MANAGEMENT"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_MANAGEMENT":
		fallthrough
	case "AML_KYC":
		fallthrough
	case "ASSET_MANAGEMENT":
		fallthrough
	case "AUDIT_MANAGEMENT":
		fallthrough
	case "BUSINESS_CONTINUITY_PLANNING":
		fallthrough
	case "CHANGE_MANAGEMENT":
		fallthrough
	case "COMPLAINT_MANAGEMENT":
		fallthrough
	case "COMPLIANCE_MANAGEMENT":
		fallthrough
	case "CONTRACT_MANAGEMENT":
		fallthrough
	case "CONTROLS_COMPLIANCE":
		fallthrough
	case "CONTROLS_MANAGEMENT":
		fallthrough
	case "CRISIS_MANAGEMENT":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "CUSTOM_GRC_USE_CASE":
		fallthrough
	case "CYBER_RISK_MANAGEMENT":
		fallthrough
	case "DATA_PRIVACY_MANAGEMENT":
		fallthrough
	case "EMPLOYEE_COMPLIANCE":
		fallthrough
	case "ENTERPRISE_RISK_MANAGEMENT":
		fallthrough
	case "ESG":
		fallthrough
	case "INCIDENT_MANAGEMENT":
		fallthrough
	case "INTERNAL_AUDIT_MANAGEMENT":
		fallthrough
	case "IT_RISK_MANAGEMENT":
		fallthrough
	case "NONE":
		fallthrough
	case "OPERATIONAL_RESILIENCY":
		fallthrough
	case "OTHER":
		fallthrough
	case "POLICY_AND_PROCEDURE_MANAGEMENT":
		fallthrough
	case "POLICY_MANAGEMENT":
		fallthrough
	case "PRIVACY_MANAGEMENT":
		fallthrough
	case "QUANTIFY":
		fallthrough
	case "REGULATORY_COMPLIANCE":
		fallthrough
	case "REPOSITORY":
		fallthrough
	case "RISK_QUANTIFICATION":
		fallthrough
	case "SOX_TESTING":
		fallthrough
	case "STANDARDS_REGULATIONS":
		fallthrough
	case "SURVEY":
		fallthrough
	case "THIRD_PARTY_RISK_MANAGEMENT":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ApplicationAPICreateIn struct {
	// The hex representation of the icon color of the application (defaults to #00a3de)
	Color *string `json:"color,omitempty"`
	// The icon type of the application (defaults to CUBES)
	Icon *Icon `json:"icon,omitempty"`
	// The name of the application
	Name string `json:"name"`
	// The type of Risk Cloud application (defaults to NONE)
	Type *Type `json:"type,omitempty"`
}

func (o *ApplicationAPICreateIn) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ApplicationAPICreateIn) GetIcon() *Icon {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ApplicationAPICreateIn) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApplicationAPICreateIn) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
