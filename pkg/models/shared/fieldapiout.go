// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldAPIOutFieldType - The type of the field
type FieldAPIOutFieldType string

const (
	FieldAPIOutFieldTypeDate            FieldAPIOutFieldType = "DATE"
	FieldAPIOutFieldTypeUser            FieldAPIOutFieldType = "USER"
	FieldAPIOutFieldTypeExternalUser    FieldAPIOutFieldType = "EXTERNAL_USER"
	FieldAPIOutFieldTypeText            FieldAPIOutFieldType = "TEXT"
	FieldAPIOutFieldTypeTextArea        FieldAPIOutFieldType = "TEXT_AREA"
	FieldAPIOutFieldTypeNumber          FieldAPIOutFieldType = "NUMBER"
	FieldAPIOutFieldTypeESignature      FieldAPIOutFieldType = "E_SIGNATURE"
	FieldAPIOutFieldTypeCheckbox        FieldAPIOutFieldType = "CHECKBOX"
	FieldAPIOutFieldTypeMultiSelect     FieldAPIOutFieldType = "MULTI_SELECT"
	FieldAPIOutFieldTypeRadio           FieldAPIOutFieldType = "RADIO"
	FieldAPIOutFieldTypeSelect          FieldAPIOutFieldType = "SELECT"
	FieldAPIOutFieldTypeAttachment      FieldAPIOutFieldType = "ATTACHMENT"
	FieldAPIOutFieldTypeCalculation     FieldAPIOutFieldType = "CALCULATION"
	FieldAPIOutFieldTypeDateCalculation FieldAPIOutFieldType = "DATE_CALCULATION"
	FieldAPIOutFieldTypeOther           FieldAPIOutFieldType = "OTHER"
)

func (e FieldAPIOutFieldType) ToPointer() *FieldAPIOutFieldType {
	return &e
}

func (e *FieldAPIOutFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		fallthrough
	case "USER":
		fallthrough
	case "EXTERNAL_USER":
		fallthrough
	case "TEXT":
		fallthrough
	case "TEXT_AREA":
		fallthrough
	case "NUMBER":
		fallthrough
	case "E_SIGNATURE":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "MULTI_SELECT":
		fallthrough
	case "RADIO":
		fallthrough
	case "SELECT":
		fallthrough
	case "ATTACHMENT":
		fallthrough
	case "CALCULATION":
		fallthrough
	case "DATE_CALCULATION":
		fallthrough
	case "OTHER":
		*e = FieldAPIOutFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldAPIOutFieldType: %v", v)
	}
}

// FieldAPIOutValueType - The type of the field value
type FieldAPIOutValueType string

const (
	FieldAPIOutValueTypeNumber      FieldAPIOutValueType = "NUMBER"
	FieldAPIOutValueTypeCalculation FieldAPIOutValueType = "CALCULATION"
	FieldAPIOutValueTypeAttachment  FieldAPIOutValueType = "ATTACHMENT"
	FieldAPIOutValueTypeDate        FieldAPIOutValueType = "DATE"
	FieldAPIOutValueTypeOption      FieldAPIOutValueType = "OPTION"
	FieldAPIOutValueTypeUser        FieldAPIOutValueType = "USER"
	FieldAPIOutValueTypeText        FieldAPIOutValueType = "TEXT"
	FieldAPIOutValueTypeOther       FieldAPIOutValueType = "OTHER"
)

func (e FieldAPIOutValueType) ToPointer() *FieldAPIOutValueType {
	return &e
}

func (e *FieldAPIOutValueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		fallthrough
	case "CALCULATION":
		fallthrough
	case "ATTACHMENT":
		fallthrough
	case "DATE":
		fallthrough
	case "OPTION":
		fallthrough
	case "USER":
		fallthrough
	case "TEXT":
		fallthrough
	case "OTHER":
		*e = FieldAPIOutValueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldAPIOutValueType: %v", v)
	}
}

// FieldAPIOut - A array of returned items
type FieldAPIOut struct {
	// The parent application of the record
	Application *ApplicationPropertyAPIOut `json:"application,omitempty"`
	// The default values of the field
	DefaultValues []ValuePropertyAPIOut `json:"defaultValues,omitempty"`
	// Whether the field is global
	Global *bool `json:"global,omitempty"`
	// The help text of the field to supply necessary context for filling out the field
	HelpText *string `json:"helpText,omitempty"`
	// The unique ID of this Risk Cloud resource
	ID *string `json:"id,omitempty"`
	// The label of the field as shown on the record
	Label *string `json:"label,omitempty"`
	// The name of the field
	Name *string `json:"name,omitempty"`
	// Identifies the type of object this data represents
	Object *string `json:"object,omitempty"`
	// The option values of the field for Select, Multi-Select, Radio, Checkbox, and E-Signature field types
	OptionValues []ValuePropertyAPIOut `json:"optionValues,omitempty"`
	// The tooltip information of the field
	Tooltip *string `json:"tooltip,omitempty"`
	// The type of the field
	Type *FieldAPIOutFieldType `json:"type,omitempty"`
	// The type of the field value
	ValueType *FieldAPIOutValueType `json:"valueType,omitempty"`
	// The parent workflow of the step
	Workflow *WorkflowPropertyAPIOut `json:"workflow,omitempty"`
}

func (o *FieldAPIOut) GetApplication() *ApplicationPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Application
}

func (o *FieldAPIOut) GetDefaultValues() []ValuePropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.DefaultValues
}

func (o *FieldAPIOut) GetGlobal() *bool {
	if o == nil {
		return nil
	}
	return o.Global
}

func (o *FieldAPIOut) GetHelpText() *string {
	if o == nil {
		return nil
	}
	return o.HelpText
}

func (o *FieldAPIOut) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FieldAPIOut) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldAPIOut) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *FieldAPIOut) GetObject() *string {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *FieldAPIOut) GetOptionValues() []ValuePropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.OptionValues
}

func (o *FieldAPIOut) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *FieldAPIOut) GetType() *FieldAPIOutFieldType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FieldAPIOut) GetValueType() *FieldAPIOutValueType {
	if o == nil {
		return nil
	}
	return o.ValueType
}

func (o *FieldAPIOut) GetWorkflow() *WorkflowPropertyAPIOut {
	if o == nil {
		return nil
	}
	return o.Workflow
}
